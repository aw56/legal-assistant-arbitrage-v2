# ================================
# ‚öñÔ∏è Legal Assistant Arbitrage v2
# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
# ================================

.DEFAULT_GOAL := help

# ======================================
# üåç FORCE UTF-8 ENV (for sed-auto)
# ======================================
SHELL := /bin/bash
.SHELLFLAGS := -o pipefail -c
export LANG := en_US.UTF-8
export LC_ALL := en_US.UTF-8
export LANGUAGE := en_US.UTF-8

locale-check:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏..."
	@echo "LANG=$(LANG)"
	@echo "LC_ALL=$(LC_ALL)"
	@locale | grep UTF || echo "‚ö†Ô∏è  UTF-8 –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
	@echo "‚úÖ –õ–æ–∫–∞–ª—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞."

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
COMPOSE_FILE        = docker-compose.prod.yml
BACKEND_CONTAINER  := $(shell docker compose -f $(COMPOSE_FILE) ps -q backend)
DB_CONTAINER        = legal-assistant-db
DB_NAME             = legal_assistant_db
DB_USER             = admin
DB_DUMP_FILE        = backup.sql
SEED_FILE           = seeds/init_data.sql
FIXTURES_DIR        = fixtures

# ================================
# üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# ================================
install: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å prod –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	docker exec -it $(BACKEND_CONTAINER) pip install -r requirements.txt

install-dev: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	docker exec -it $(BACKEND_CONTAINER) pip install -r requirements-dev.txt

setup-dev: install-dev up migrate seed test ## üöÄ –ü–æ–ª–Ω—ã–π —Å–µ—Ç–∞–ø –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "‚úÖ Dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"

setup-prod: rebuild migrate seed ## üöÄ –ü–æ–ª–Ω—ã–π —Å–µ—Ç–∞–ø –¥–ª—è production
	@echo "‚úÖ Prod –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"

# ==========================================
# üß∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–´–ú –û–ö–†–£–ñ–ï–ù–ò–ï–ú (VENV)
# ==========================================

venv-reset:
	@echo "üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
	sudo rm -rf venv
	@echo "üêç –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
	python3 -m venv venv
	@echo "üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
	. venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt
	@echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!"

# ==========================================
# üîê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–ê–í –î–û–°–¢–£–ü–ê (–ü–û–õ–ù–´–ô RESET)
# ==========================================

fix-perms:
	@echo "üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç..."
	sudo chown -R admin:admin ~/my_projects/legal-assistant-arbitrage-v2
	sudo chmod -R u+rwX,go+rX,go-w ~/my_projects/legal-assistant-arbitrage-v2
	@echo "‚úÖ –ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"

# ==========================================
# üß™ –ü–†–û–ì–û–ù POSTMAN-–¢–ï–°–¢–û–í (CI-–í–ï–†–°–ò–Ø)
# ==========================================

test-postman:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ CI-—Ç–µ—Å—Ç–æ–≤ Postman..."
	newman run docs/Legal_Assistant_Arbitrage_v3_CI.postman_collection.json \
	-e docs/Legal_Assistant_Env.postman_environment.json \
	--reporters cli,html \
	--reporter-html-export artifacts/newman_report.html
	@echo "‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ artifacts/newman_report.html"

# ================================
# üê≥ Docker
# ================================
up: ## üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose -f $(COMPOSE_FILE) up -d --build

down: ## ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose -f $(COMPOSE_FILE) down

rebuild: ## üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å volume
	docker compose -f $(COMPOSE_FILE) down --volumes --remove-orphans
	docker compose -f $(COMPOSE_FILE) up -d --build --force-recreate

restart-docker: down up ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

logs: ## üìú –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose -f $(COMPOSE_FILE) logs -f

ps: ## üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose -f $(COMPOSE_FILE) ps

shell: ## üêö Bash –≤–Ω—É—Ç—Ä–∏ backend
	docker exec -it $(BACKEND_CONTAINER) bash

# ================================
# üóÑÔ∏è Alembic / –ú–∏–≥—Ä–∞—Ü–∏–∏
# ================================
doctor-check:
	@if [ -z "$(BACKEND_CONTAINER)" ]; then echo "‚ùå Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"; exit 1; fi

migrate: doctor-check ## üóÑÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
	docker exec -it $(BACKEND_CONTAINER) alembic upgrade head

makemigrations: doctor-check ## ‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
	docker exec -it $(BACKEND_CONTAINER) alembic revision --autogenerate -m "new migration"

fix-migrations: doctor-check ## üõ†Ô∏è –ê–≤—Ç–æ—Ñ–∏–∫—Å –º–∏–≥—Ä–∞—Ü–∏–π
	docker exec -it $(BACKEND_CONTAINER) python3 scripts/fix_migrations.py

current: doctor-check ## üîé –¢–µ–∫—É—â–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
	docker exec -it $(BACKEND_CONTAINER) alembic current

history: doctor-check ## üìú –ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
	docker exec -it $(BACKEND_CONTAINER) alembic history --verbose | tail -n 50

heads: doctor-check ## üß© Head-–º–∏–≥—Ä–∞—Ü–∏–∏
	docker exec -it $(BACKEND_CONTAINER) alembic heads

downgrade: doctor-check ## ‚è™ –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (make downgrade v=-1)
	@if [ -z "$(v)" ]; then echo "‚ùå –£–∫–∞–∂–∏ –≤–µ—Ä—Å–∏—é"; exit 1; fi
	docker exec -it $(BACKEND_CONTAINER) alembic downgrade $(v)

merge-heads: doctor-check ## üîÄ –°–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ heads
	docker exec -it $(BACKEND_CONTAINER) alembic merge heads -m "merge heads"

stamp-head: doctor-check ## üè∑Ô∏è –ü–æ–º–µ—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ
	docker exec -it $(BACKEND_CONTAINER) alembic stamp head
	docker exec -it $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME) -c "SELECT * FROM alembic_version;"

check-migrations: doctor-check ## ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π
	docker exec -it $(BACKEND_CONTAINER) alembic check || (echo "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏"; exit 1)

# ================================
# üêò PostgreSQL
# ================================
db-shell: ## üêö –ö–æ–Ω—Å–æ–ª—å psql
	docker exec -it $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME)

db-tables: ## üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
	docker exec -it $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME) -c "\dt"

db-dump: ## üíæ –î–∞–º–ø –ë–î
	docker exec -t $(DB_CONTAINER) pg_dump -U $(DB_USER) $(DB_NAME) > $(DB_DUMP_FILE)
	@echo "‚úÖ –î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $(DB_DUMP_FILE)"

db-restore: ## ‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –¥–∞–º–ø–∞
	@if [ ! -f "$(DB_DUMP_FILE)" ]; then echo "‚ùå –ù–µ—Ç –¥–∞–º–ø–∞"; exit 1; fi
	docker exec -i $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME) < $(DB_DUMP_FILE)

db-reset-tables: ## üí• –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
	docker exec -it $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME) -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"

drop-db: ## üí• –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É
	docker exec -it $(DB_CONTAINER) dropdb -U $(DB_USER) --if-exists $(DB_NAME)

create-db: ## üÜï –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É
	docker exec -it $(DB_CONTAINER) createdb -U $(DB_USER) $(DB_NAME)

check-db: ## ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
	docker exec -it $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME) -c "SELECT now();"

db-inspect: ## üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è —Å—Ö–µ–º –∏ Alembic
	docker exec -it $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME) -c "SELECT * FROM alembic_version;"
	docker exec -it $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME) -c '\dn'

wait-for-db: ## ‚è≥ –ñ–¥–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ë–î
	until docker exec -it $(DB_CONTAINER) pg_isready -U $(DB_USER) -d $(DB_NAME); do sleep 2; done

# ================================
# üí£ Reset –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ================================
reset-all: ## –ü–æ–ª–Ω—ã–π —Ä–µ—Å–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
	docker compose -f $(COMPOSE_FILE) down --volumes --remove-orphans
	docker compose -f $(COMPOSE_FILE) up -d db
	$(MAKE) wait-for-db
	-$(MAKE) drop-db
	$(MAKE) create-db
	docker compose -f $(COMPOSE_FILE) up -d backend
	$(MAKE) migrate
	@if [ -f "$(SEED_FILE)" ]; then $(MAKE) seed; fi
	@echo "‚úÖ –†–µ—Å–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω"

reset-db: drop-db create-db migrate seed ## üí£ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∏ –º–∏–≥—Ä–∞—Ü–∏–∏

reset-migrations: ## üí£ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –º–∏–≥—Ä–∞—Ü–∏–π
	rm -f migrations/versions/*.py || true
	-$(MAKE) drop-db
	$(MAKE) create-db
	docker exec -it $(BACKEND_CONTAINER) alembic revision --autogenerate -m "init schema"
	$(MAKE) migrate

# ================================
# ‚ù§Ô∏è Healthcheck & Smoke
# ================================
health-host: ## ‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ API (—Ö–æ—Å—Ç)
	curl -s http://127.0.0.1:8080/api/health | jq

health-container: ## ‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ API (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
	docker exec -it $(BACKEND_CONTAINER) curl -s http://127.0.0.1:8000/api/health | jq

wait-for-api: ## ‚è≥ –ñ–¥–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å API
	until curl -s http://127.0.0.1:8080/api/health | grep '"ok"' > /dev/null; do sleep 2; done

smoke: ## üö¶ Smoke-—Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
	./scripts/smoke.sh

smoke-ci: ## ü§ñ Smoke-—Ç–µ—Å—Ç—ã –¥–ª—è CI
	bash -eo pipefail ./scripts/smoke.sh

routes: ## üìã –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ FastAPI
	docker compose -f $(COMPOSE_FILE) exec backend python -c "from backend.app.main import app; print([r.path for r in app.routes])"

doctor: ## ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@docker --version || (echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1)
	@docker compose -f $(COMPOSE_FILE) ps
	@docker exec -it $(DB_CONTAINER) psql -U $(DB_USER) -d $(DB_NAME) -c "SELECT now();"
	@docker exec -it $(BACKEND_CONTAINER) alembic current
	@curl -s http://127.0.0.1:8080/api/health | jq
	@echo "‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ!"

init: up migrate seed wait-for-api health-host ## üöÄ –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

# ================================
# üîß Git
# ================================
git-add: git-add . ## ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è

git-fix: ## üßπ –ê–≤—Ç–æ-—Ñ–∏–∫—Å—ã
	docker exec -it $(BACKEND_CONTAINER) python3 scripts/fix_migrations.py || true
	pre-commit run --all-files || true

git-commit: ## üíæ Commit (make git-commit m="msg")
	@if [ -z "$(m)" ]; then echo "‚ùå –£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"; exit 1; fi
	git commit -m "$(m)" --allow-empty || true

git-push: ## ‚¨ÜÔ∏è Push
	git push origin main

git-all: git-add git-fix git-commit git-push ## üöÄ add+commit+push

git-amend: ## ‚úèÔ∏è Amend –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
	git add .
	pre-commit run --all-files || true
	git commit --amend --no-edit || true
	git push origin main --force

git-sync: ## üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
	@git stash push -m "sync-stash" || true
	@git fetch origin main
	@git rebase origin/main || true
	@git stash pop || true

git-reset-hard: ## üí• –ñ—ë—Å—Ç–∫–∏–π —Å–±—Ä–æ—Å
	git fetch origin main
	git reset --hard origin/main

git-reset-soft: ## üìù Soft reset
	git fetch origin main
	git reset --soft origin/main

# === GitHub Sync ===
.PHONY: sync-github
sync-github:
	@echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
	git status
	@echo "üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
	git add .
	@echo "üìù –ö–æ–º–º–∏—Ç..."
	git commit -m "üîÑ auto-sync: $$(date '+%Y-%m-%d %H:%M:%S')" || echo "‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞."
	@echo "üöÄ Push –Ω–∞ GitHub..."
	git push origin main
	@echo "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

# ================================
# ‚úÖ –¢–µ—Å—Ç—ã
# ================================
test: ## ‚úÖ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
	docker exec -it $(BACKEND_CONTAINER) pytest backend/app/tests

test-verbose: ## üêõ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ç–µ—Å—Ç—ã
	docker exec -it $(BACKEND_CONTAINER) pytest -vv backend/app/tests

docker-test: ## üß™ –í—Å–µ —Ç–µ—Å—Ç—ã
	docker exec -it $(BACKEND_CONTAINER) pytest -vv

ci-test: ## ü§ñ CI/CD —Ç–µ—Å—Ç—ã (pytest + API)
	docker exec $(BACKEND_CONTAINER) pytest -vv --maxfail=1 --disable-warnings -q
	$(MAKE) test-api

coverage: ## üìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
	docker exec -it $(BACKEND_CONTAINER) pytest --cov=backend/app tests/ --cov-report=term-missing

# ================================
# üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API
# ================================
test-auth: ## üîë –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (register/login/me)
	./scripts/test_auth.sh

test-laws: ## üìö –¢–µ—Å—Ç CRUD –∑–∞–∫–æ–Ω–æ–≤
	./scripts/test_laws.sh $(TOKEN)

test-decisions: ## ‚öñÔ∏è –¢–µ—Å—Ç CRUD —Ä–µ—à–µ–Ω–∏–π
	./scripts/test_decisions.sh $(TOKEN)

test-updated-at: ## ‚è∞ –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –ø–æ–ª—è updated_at
	./scripts/test_updated_at.sh $(TOKEN)

test-api: ## üåê –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç API (auth + laws + decisions + updated_at)
	./scripts/test_api.sh

# ================================
# üöÄ Local FastAPI
# ================================
run: ## üöÄ –ó–∞–ø—É—Å–∫ FastAPI –ª–æ–∫–∞–ª—å–Ω–æ
	nohup uvicorn backend.app.main:app --reload --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &

stop: ## ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FastAPI
	@pkill -f "uvicorn backend.app.main:app --reload" || true

status: ## üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å uvicorn
	@pgrep -a -f "uvicorn backend.app.main:app --reload" || echo "‚ùå uvicorn –Ω–µ –∑–∞–ø—É—â–µ–Ω"

logs-local: ## üìú –õ–æ–≥–∏ uvicorn
	@tail -f uvicorn.log

restart: stop run ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ uvicorn

# ================================
# üê≥ Docker (prod/staging)
# ================================
ps-docker: ## üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	docker compose -f docker-compose.prod.yml ps

logs-docker: ## üìú –õ–æ–≥–∏
	docker compose -f docker-compose.prod.yml logs -f

shell-docker: ## üêö Bash –≤ backend
	docker compose -f docker-compose.prod.yml exec backend bash

# ================================
# üîé –õ–∏–Ω—Ç–µ—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ================================
lint: ## üîé –õ–∏–Ω—Ç–µ—Ä—ã
	pre-commit run --all-files

format: ## üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	black backend/ scripts/
	isort backend/ scripts/

# ================================
# üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
# ================================
apidocs: ## üìñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å API_DOCS.md
	docker compose -f $(COMPOSE_FILE) exec backend sh -c "PYTHONPATH=/code python3 scripts/generate_docs.py"

archdocs: ## üèóÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ARCHITECTURE.md
	docker compose -f $(COMPOSE_FILE) exec backend sh -c "PYTHONPATH=/code python3 scripts/generate_architecture.py"

docs: apidocs archdocs ## üìö –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

deploy: setup-prod ## üöÄ –î–µ–ø–ª–æ–π

# ================================
# üì¶ Postman ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —ç–∫—Å–ø–æ—Ä—Ç, –∑–∞–≥—Ä—É–∑–∫–∞ –∏ HTTP-–¥–æ—Å—Ç—É–ø
# ================================

# üß© –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Postman –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–µ–≥–æ URL (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ Postman)
postman: ## üß© –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Postman –∫–æ–ª–ª–µ–∫—Ü–∏—é (–ø—Ä–∏–º–µ—Ä: make postman HOST_URL=http://82.165.144.150:8080)
	@if [ -z "$(HOST_URL)" ]; then echo "‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è BASE_URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://127.0.0.1:8080"; fi
	docker compose -f $(COMPOSE_FILE) exec backend sh -c "PYTHONPATH=/code BASE_URL=$(HOST_URL) python3 scripts/generate_postman.py"
	$(MAKE) postman-export

# üì¶ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
postman-export: ## üì¶ –£–ø–∞–∫–æ–≤–∞—Ç—å Postman –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ ZIP
	@mkdir -p artifacts
	zip -j artifacts/postman_collection.zip docs/postman_collection.json
	@echo "‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: artifacts/postman_collection.zip"

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ WSL (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Windows-–ø–∞–ø–∫—É)
postman-download: ## üì• –°–∫–∞—á–∞—Ç—å Postman –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ü–ö (WSL ‚Üí Windows)
	@if [ -z "$(HOST)" ]; then echo "‚ùå –£–∫–∞–∂–∏ —Å–µ—Ä–≤–µ—Ä, –ø—Ä–∏–º–µ—Ä: make postman-download HOST=admin@82.165.144.150"; exit 1; fi
	scp $(HOST):/home/admin/my_projects/legal-assistant-arbitrage-v2/artifacts/postman_collection.zip /mnt/c/Users/alexe/Downloads/
	@echo "‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ C:\\Users\\alexe\\Downloads\\postman_collection.zip"

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ PowerShell (PuTTY pscp.exe)
postman-download-win: ## üì• –°–∫–∞—á–∞—Ç—å Postman –∫–æ–ª–ª–µ–∫—Ü–∏—é —á–µ—Ä–µ–∑ pscp.exe (Windows)
	@if [ -z "$(HOST)" ]; then echo "‚ùå –£–∫–∞–∂–∏ —Å–µ—Ä–≤–µ—Ä, –ø—Ä–∏–º–µ—Ä: make postman-download-win HOST=admin@82.165.144.150"; exit 1; fi
	pscp.exe $(HOST):/home/admin/my_projects/legal-assistant-arbitrage-v2/artifacts/postman_collection.zip C:\\Users\\alexe\\Downloads\\
	@echo "‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ C:\\Users\\alexe\\Downloads\\postman_collection.zip"

# üåê HTTP-–¥–æ—Å—Ç—É–ø –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
postman-serve: ## üåê –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ HTTP
	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Postman –∫–æ–ª–ª–µ–∫—Ü–∏–∏..."
	@cd artifacts && python3 -m http.server 8080 --bind 0.0.0.0 &
	@sleep 2
	@SERVER_PID=$$(pgrep -f "http.server 8080" | head -n1); \
	IP=$$(hostname -I | awk '{print $$1}'); \
	echo ""; \
	echo "‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:"; \
	echo "   üåç http://$$IP:8080/postman_collection.zip"; \
	echo ""; \
	read -p '–ù–∞–∂–º–∏—Ç–µ [Enter], –∫–æ–≥–¥–∞ —Å–∫–∞—á–∞–µ—Ç–µ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä...'; \
	kill $$SERVER_PID && echo "üõë HTTP-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

# üåê –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/docs/postman –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ FastAPI
postman-api-route: ## ‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å /api/docs/postman —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	@echo "‚û°Ô∏è  –î–æ–±–∞–≤—å —Ñ–∞–π–ª backend/app/routes/docs.py —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:"
	@echo '---'
	@echo 'from fastapi import APIRouter'
	@echo 'from fastapi.responses import FileResponse'
	@echo 'from pathlib import Path'
	@echo ''
	@echo 'router = APIRouter(prefix="/api/docs", tags=["docs"])'
	@echo ''
	@echo '@router.get("/postman", summary="–°–∫–∞—á–∞—Ç—å Postman –∫–æ–ª–ª–µ–∫—Ü–∏—é")'
	@echo 'def get_postman_collection():'
	@echo '    path = Path("docs/postman_collection.json")'
	@echo '    if not path.exists():'
	@echo '        return {"detail": "‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ make postman"}'
	@echo '    return FileResponse(path, filename="postman_collection.json", media_type="application/json")'
	@echo ''
	@echo "‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π —Ä–æ—É—Ç –≤ main.py:"
	@echo 'from backend.app.routes import docs'
	@echo 'app.include_router(docs.router)'

# === Postman / Newman CI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
#
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CI-–æ—Ç—á—ë—Ç–∞ Postman
#test-ci:
#	@echo "üöÄ –ó–∞–ø—É—Å–∫ Newman CI —Ç–µ—Å—Ç–æ–≤ (AutoAuth, CRUD, Cleanup)..."
#	newman run docs/Legal_Assistant_Arbitrage_v3_CI.postman_collection.json \
#	  -e docs/Legal_Assistant_Env.postman_environment.json \
#	  --reporters cli,html \
#	  --reporter-html-export artifacts/newman_report.html
#	@echo "‚úÖ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: artifacts/newman_report.html"

# ===========================================
# üß™ Postman CI v3.1 ‚Äî AutoAuth Full Pipeline
# ===========================================

test-ci-v31: ## üöÄ –ü—Ä–æ–≥–æ–Ω AutoAuth —Ç–µ—Å—Ç–æ–≤ (v3.1) —á–µ—Ä–µ–∑ Postman + Newman
	@echo "üöÄ –ó–∞–ø—É—Å–∫ Newman CI —Ç–µ—Å—Ç–æ–≤ (AutoAuth v3.1, CRUD, Cleanup)..."
	@mkdir -p artifacts
	newman run docs/Legal_Assistant_Arbitrage_v3.1_CI.postman_collection.json \
	  -e docs/Legal_Assistant_Env.postman_environment.json \
	  --reporters cli,html \
	  --reporter-html-export artifacts/newman_report_v31.html || { \
	    echo "‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (—Å–º. –æ—Ç—á—ë—Ç –≤ artifacts/newman_report_v31.html)"; exit 1; }
	@echo ""
	@echo "‚úÖ CI-—Ç–µ—Å—Ç—ã (v3.1) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:"
	@echo "   üìÑ artifacts/newman_report_v31.html"

# ================================
# üß™ CI Postman Tests (AutoAuth v3.2)
# ================================

test-ci-v32: ## üß© –ü—Ä–æ–≥–æ–Ω Postman CI-—Ç–µ—Å—Ç–æ–≤ v3.2 (AutoAuth, CRUD, Cleanup, Fix law_id)
	@echo "üöÄ –ó–∞–ø—É—Å–∫ Newman CI —Ç–µ—Å—Ç–æ–≤ (AutoAuth v3.2, CRUD, Cleanup, Fix law_id)..."
	newman run docs/Legal_Assistant_Arbitrage_v3.2_CI.postman_collection.json \
	  -e docs/Legal_Assistant_Env.postman_environment.json \
	  --reporters cli,html \
	  --reporter-html-export artifacts/newman_report_v32.html || { \
	    echo "‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (—Å–º. –æ—Ç—á—ë—Ç –≤ artifacts/newman_report_v32.html)"; exit 1; }
	@echo ""
	@echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ artifacts/newman_report_v32.html"

# üß™ CI-—Ç–µ—Å—Ç—ã AutoAuth v3.3 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é)
test-ci-v33: ## üöÄ –ó–∞–ø—É—Å–∫ CI-—Ç–µ—Å—Ç–æ–≤ Postman (AutoAuth v3.3 Stable)
	@echo "üöÄ –ó–∞–ø—É—Å–∫ Newman CI —Ç–µ—Å—Ç–æ–≤ (AutoAuth v3.3, CRUD, Cleanup ‚Äî Stable)..."
	newman run docs/Legal_Assistant_Arbitrage_v3.3_CI.postman_collection.json \
		-e docs/Legal_Assistant_Env.postman_environment.json \
		--reporters cli,html \
		--reporter-html-export artifacts/newman_report_v33.html || { \
			echo '‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤ (—Å–º. artifacts/newman_report_v33.html)'; exit 1; }

# ==========================================
# üß™ CI v3.3 AutoAuth ‚Äî Snapshot + Logging
# ==========================================
.PHONY: test-ci-v3

test-ci-v3: ## üöÄ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ç–µ—Å—Ç—ã + —Å–Ω–∞–ø—à–æ—Ç + push (+ –ª–æ–≥ –≤ PROGRESS_TACTICAL.md)
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ CI —Ü–∏–∫–ª–∞ (pytest + Postman + —Å–Ω–∞–ø—à–æ—Ç + GitHub push)..."
	@START_TIME=$$(date '+%Y-%m-%d %H:%M:%S'); \
	$(MAKE) test-ci-v33 && STATUS="‚úÖ –£—Å–ø–µ—à–Ω–æ" || STATUS="‚ùå –û—à–∏–±–∫–∞"; \
	echo ""; \
	echo "üì∏ –°–æ–∑–¥–∞—é —Å–Ω–∞–ø—à–æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞..."; \
	$(MAKE) progress-snapshot; \
	echo ""; \
	echo "üßæ –î–æ–±–∞–≤–ª—è—é –∑–∞–ø–∏—Å—å –≤ docs/PROGRESS_TACTICAL.md..."; \
	echo "" >> docs/PROGRESS_TACTICAL.md; \
	echo "üß™ CI v3.3 ‚Äî AutoAuth Stable $$STATUS" >> docs/PROGRESS_TACTICAL.md; \
	echo "–î–∞—Ç–∞: $$START_TIME" >> docs/PROGRESS_TACTICAL.md; \
	echo "" >> docs/PROGRESS_TACTICAL.md; \
	echo "üìò –§–∏–∫—Å–∏—Ä—É—é —Å–Ω–∞–ø—à–æ—Ç –∏ –ø—É—à—É –≤ GitHub..."; \
	$(MAKE) progress-auto-push; \
	echo "‚úÖ –ü–æ–ª–Ω—ã–π CI —Ü–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!"

# =================================
# ---- KAD integration helpers ----
# =================================
.PHONY: kad-test kad-lint kad-env-example

kad-test:
	@pytest -q backend/app/tests/test_kad_api.py -vv

kad-lint:
	@ruff check backend/app/integrations/kad_api.py backend/app/tests/test_kad_api.py

kad-env-example:
	@echo "KAD_BASE_URL=https://kad.arbitr.ru"; \
	echo "KAD_API_KEY=your_token_here"; \
	echo "KAD_TIMEOUT_S=15"; \
	echo "KAD_MAX_RETRIES=2"


# =====================================================
# üß© SED TOOLKIT v3.7 ‚Äî Safe Restore + CSV Logging
# =====================================================

export LANG := en_US.UTF-8
export LC_ALL := en_US.UTF-8
export LC_CTYPE := en_US.UTF-8

SED_RULES := scripts/sed_auto_rules.txt
SED_LOG := logs/sed.log
SED_CSV := logs/sed_auto_log.csv
SED_BACKUP_DIR := backup/sed
SED_TIMESTAMP := $(shell date '+%Y-%m-%d_%H-%M-%S')

.PHONY: sed-help sed-template sed-clean sed-fix-rules sed-validate sed-auto sed-auto-safe sed-restore sed-log-archive

# üìò –ü–æ–º–æ—â—å
sed-help:
	@echo "==========================================="
	@echo "üß∞  SED TOOLKIT v3.7 ‚Äî Safe Restore + CSV Logging"
	@echo "-------------------------------------------"
	@echo " make sed-template     # —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–∞–≤–∏–ª"
	@echo " make sed-clean        # –æ—á–∏—Å—Ç–∏—Ç—å CRLF, BOM, –Ω–µ-UTF8"
	@echo " make sed-fix-rules    # –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä–µ–ª–∫–∏ –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É"
	@echo " make sed-validate     # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª"
	@echo " make sed-auto         # –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–º–µ–Ω—ã (—Å –ª–æ–≥–æ–º –∏ CSV)"
	@echo " make sed-auto-safe    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Å –±—ç–∫–∞–ø–∞–º–∏"
	@echo " make sed-restore      # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup/sed/*.bak"
	@echo " make sed-log-archive  # –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏"
	@echo "-------------------------------------------"
	@echo " –ü—Ä–∞–≤–∏–ª–∞: $(SED_RULES)"
	@echo " –õ–æ–≥ –∑–∞–º–µ–Ω: $(SED_LOG)"
	@echo " CSV –æ—Ç—á—ë—Ç: $(SED_CSV)"
	@echo " –ë—ç–∫–∞–ø—ã: $(SED_BACKUP_DIR)"
	@echo "==========================================="

# üßæ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
sed-template:
	@mkdir -p scripts
	@echo "üßæ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω $(SED_RULES)..."
	@printf "INFO‚ÜíINFO\napi.legal.local‚Üíapi.legal.local\nv2.4‚Üív2.4\n\"testuser\"‚Üí\"apitest\"\n" > $(SED_RULES)
	@echo "‚úÖ –®–∞–±–ª–æ–Ω –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω."

# üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç BOM, CRLF –∏ –º—É—Å–æ—Ä–∞
sed-clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ $(SED_RULES)..."
	@iconv -f utf-8 -t utf-8 -c $(SED_RULES) | tr -d '\r' | sed '1s/^\xEF\xBB\xBF//' > $(SED_RULES).tmp
	@mv $(SED_RULES).tmp $(SED_RULES)
	@dos2unix -q $(SED_RULES) 2>/dev/null || true
	@sed -i 's/[[:cntrl:]]//g' $(SED_RULES)
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —Ñ–∞–π–ª –ø—Ä–∏–≤–µ–¥—ë–Ω –∫ —á–∏—Å—Ç–æ–º—É UTF-8."

# üß† –ê–≤—Ç–æ—Ñ–∏–∫—Å —Å—Ç—Ä–µ–ª–æ–∫ –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
sed-fix-rules:
	@echo "üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ–∫..."
	@grep -q '‚Üí' $(SED_RULES) || sed -i 's/->/‚Üí/g' $(SED_RULES)
	@$(MAKE) sed-clean
	@echo "‚úÖ –§–∞–π–ª –ø—Ä–∏–≤–µ–¥—ë–Ω –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –≤–∏–¥—É (UTF-8, Unicode arrows)."

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª
sed-validate:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ $(SED_RULES)..."
	@file $(SED_RULES)
	@if ! grep -q '‚Üí' $(SED_RULES); then echo "‚ùå –û—à–∏–±–∫–∞: —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Üí –Ω–µ –Ω–∞–π–¥–µ–Ω."; exit 1; fi
	@echo "‚úÖ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω."
	@if file $(SED_RULES) | grep -qv 'UTF-8'; then echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ ‚Äî –Ω–µ UTF-8."; exit 1; fi
	@echo "üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

# ü§ñ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–º–µ–Ω —Å –ª–æ–≥–æ–º –∏ CSV
sed-auto:
	@echo "ü§ñ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ-–ø—Ä–∞–≤–∏–ª –∏–∑ $(SED_RULES)..."
	@mkdir -p logs $(SED_BACKUP_DIR)
	@> $(SED_LOG)
	@echo "pattern,replace,file,timestamp" > $(SED_CSV)
	@while IFS='‚Üí' read -r pattern replace; do \
		[ -z "$$pattern" ] && continue; \
		echo "üîß –ò—â—É '$$pattern' ‚Üí '$$replace'..." | tee -a $(SED_LOG); \
		files=$$(grep -rl --exclude=$(SED_RULES) "$$pattern" backend app Makefile scripts 2>/dev/null || true); \
		for file in $$files; do \
			cp "$$file" "$(SED_BACKUP_DIR)/$$(basename $$file)_$(SED_TIMESTAMP).bak"; \
			sed -i "s|$$(printf '%s' "$$pattern" | sed 's/[.[\*^$(){}?+|/]/\\&/g')|$$(printf '%s' "$$replace" | sed 's/[&/\]/\\&/g')|g" "$$file"; \
			echo "$$pattern,$$replace,$$file,$(SED_TIMESTAMP)" >> $(SED_CSV); \
			echo "‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –≤ $$file" | tee -a $(SED_LOG); \
		done; \
	done < $(SED_RULES)
	@echo "üöÄ sed-auto –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. –û—Ç—á—ë—Ç—ã: $(SED_LOG), $(SED_CSV)"

# üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
sed-auto-safe:
	@echo "üõ°Ô∏è  –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º SED AUTO..."
	@mkdir -p $(SED_BACKUP_DIR)
	@$(MAKE) sed-fix-rules
	@$(MAKE) sed-validate
	@$(MAKE) sed-auto || { echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ sed-auto"; exit 1; }
	@echo "‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –ë—ç–∫–∞–ø—ã ‚Äî –≤ $(SED_BACKUP_DIR)."

# ‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–æ–≤
sed-restore:
	@echo "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª—ã –∏–∑ $(SED_BACKUP_DIR)..."
	@find $(SED_BACKUP_DIR) -type f -name "*.bak" | while read file; do \
		target=$$(basename $$file | sed 's/_.*\.bak//'); \
		if [ -f "$$target" ]; then \
			cp "$$file" "$$target"; \
			echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω $$target"; \
		else \
			echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (–æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω): $$target"; \
		fi; \
	done
	@echo "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

# üóÉÔ∏è –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –ª–æ–≥–æ–≤
sed-log-archive:
	@mkdir -p logs/archive
	@zip -q logs/archive/sed_logs_$(SED_TIMESTAMP).zip $(SED_LOG) $(SED_CSV) || true
	@echo "‚úÖ –õ–æ–≥–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ logs/archive/sed_logs_$(SED_TIMESTAMP).zip"

# ===========================================================
# üß≠ PROGRESS & CI-DOCS v2.4 ‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã –∏ —Å–Ω–∞–ø—à–æ—Ç—ã
# ===========================================================

PROGRESS_DIR := artifacts
PROGRESS_DOCS_DIR := docs
PROGRESS_DATE := $(shell date '+%Y%m%d')
PROGRESS_TIME := $(shell date '+%H%M')
PROGRESS_FILE := $(PROGRESS_DOCS_DIR)/PROGRESS_$(PROGRESS_DATE).md
PROGRESS_SNAPSHOT := $(PROGRESS_DIR)/PROGRESS_$(PROGRESS_DATE)_$(PROGRESS_TIME).md
PROGRESS_TEMPLATE := $(PROGRESS_DOCS_DIR)/PROGRESS_TEMPLATE.md
TACTICAL_FILE := $(PROGRESS_DOCS_DIR)/PROGRESS_TACTICAL.md

.PHONY: progress-template progress-append progress-snapshot progress-auto-push progress-help progress-auto-test

# üßæ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç (–Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)
progress-template:
	@mkdir -p $(PROGRESS_DOCS_DIR)
	@if [ -f "$(PROGRESS_TEMPLATE)" ]; then \
		cp $(PROGRESS_TEMPLATE) $(PROGRESS_FILE); \
		echo "‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç: $(PROGRESS_FILE)"; \
	else \
		echo "# üìò –û—Ç—á—ë—Ç $(PROGRESS_DATE)" > $(PROGRESS_FILE); \
		echo "" >> $(PROGRESS_FILE); \
		echo "**–î–∞—Ç–∞:** $$(date '+%Y-%m-%d %H:%M:%S')" >> $(PROGRESS_FILE); \
		echo "**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** " >> $(PROGRESS_FILE); \
		echo "" >> $(PROGRESS_FILE); \
		echo "## ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" >> $(PROGRESS_FILE); \
		echo "- " >> $(PROGRESS_FILE); \
		echo "" >> $(PROGRESS_FILE); \
		echo "## ‚öôÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏—è" >> $(PROGRESS_FILE); \
		echo "- " >> $(PROGRESS_FILE); \
		echo ""; \
		echo "‚úÖ –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é"; \
	fi

# ‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç—ã –≤—Ä—É—á–Ω—É—é
progress-append:
	@echo "‚úèÔ∏è –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ñ–∞–∫—Ç—ã (–∑–∞–≤–µ—Ä—à–∏ Ctrl+D):"
	@echo "" >> $(PROGRESS_FILE)
	@cat >> $(PROGRESS_FILE)
	@echo "" >> $(PROGRESS_FILE)
	@echo "‚úÖ –§–∞–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ $(PROGRESS_FILE)"

# üß© –°–æ–∑–¥–∞—Ç—å —Å–Ω–∞–ø—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞
progress-snapshot:
	@mkdir -p $(PROGRESS_DIR)
	@cp $(PROGRESS_FILE) $(PROGRESS_SNAPSHOT)
	@echo "‚úÖ –°–Ω–∞–ø—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $(PROGRESS_SNAPSHOT)"

# üöÄ –°–Ω–∞–ø—à–æ—Ç + Commit + Push
progress-auto-push:
	@$(MAKE) progress-snapshot
	@git add $(PROGRESS_DOCS_DIR)/PROGRESS_*.md $(PROGRESS_DIR)/PROGRESS_*.md || true
	@git commit -m "üìò progress snapshot $(PROGRESS_DATE)_$(PROGRESS_TIME)" || echo "‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞."
	@git push origin main
	@echo "‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub (main)"

# ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
progress-auto-test:
	@echo "üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–æ–≤ + —Å–Ω–∞–ø—à–æ—Ç..."
	@$(MAKE) test-ci || echo "‚ö†Ô∏è –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
	@$(MAKE) progress-auto-push
	@echo "‚úÖ –¶–∏–∫–ª CI + Docs —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω."

# üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞
progress-help:
	@echo "============================================"
	@echo "üìò PROGRESS & CI-DOCS v2.4 ‚Äî –ê–≤—Ç–æ–æ—Ç—á—ë—Ç—ã"
	@echo "--------------------------------------------"
	@echo " make progress-template   ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç"
	@echo " make progress-append     ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç—ã –≤—Ä—É—á–Ω—É—é"
	@echo " make progress-snapshot   ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∞–ø—à–æ—Ç –æ—Ç—á—ë—Ç–∞"
	@echo " make progress-auto-push  ‚Äî —Å–Ω–∞–ø—à–æ—Ç + commit + push"
	@echo " make progress-auto-test  ‚Äî —Ç–µ—Å—Ç—ã + —Å–Ω–∞–ø—à–æ—Ç + push"
	@echo "--------------------------------------------"
	@echo "–§–∞–π–ª—ã:"
	@echo " docs/PROGRESS_YYYYMMDD.md ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç"
	@echo " artifacts/PROGRESS_*.md   ‚Äî –∞—Ä—Ö–∏–≤ —Å–Ω–∞–ø—à–æ—Ç–æ–≤"
	@echo "============================================"

# ================================
# üìñ Help
# ================================
help: ## üìñ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã
	@echo "=== üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Makefile ==="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}'

.PHONY: help install install-dev setup-dev setup-prod \
	up down rebuild restart-docker logs ps shell \
	doctor-check migrate makemigrations fix-migrations current history heads downgrade merge-heads stamp-head check-migrations \
	db-shell db-tables db-dump db-restore db-reset-tables drop-db create-db check-db db-inspect wait-for-db \
	reset-all reset-db reset-migrations \
	health-host health-container wait-for-api smoke smoke-ci routes doctor init \
	git-add git-fix git-commit git-push git-all git-amend git-sync git-reset-hard git-reset-soft \
	test test-verbose docker-test ci-test coverage \
	test-auth test-laws test-decisions test-api \
	run stop status logs-local restart \
	ps-docker logs-docker shell-docker \
	lint format apidocs archdocs docs deploy
