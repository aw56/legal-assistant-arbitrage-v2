"""
Health-check API –¥–ª—è Legal Assistant Arbitrage v2.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–¥—Å–∏—Å—Ç–µ–º:
 - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (PostgreSQL / SQLite)
 - –í–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (kad.arbitr.ru)
"""
import asyncio
from fastapi import APIRouter
from sqlalchemy import text

from backend.app.database import engine
from backend.app.services.kad_service import check_kad_health

router = APIRouter()

@router.get("/health", tags=["health"])
async def health_check():
    """
    üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:
    {
        "status": "ok",
        "services": {"db": "ok", "kad": "ok"}
    }
    """
    results = {"db": "unknown", "kad": "unknown"}
    global_status = "ok"

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
    try:
        async with engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        results["db"] = "ok"
    except Exception as e:
        results["db"] = f"error: {e}"
        global_status = "error"

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ kad.arbitr.ru ---
    kad_result = await check_kad_health()
    results["kad"] = kad_result.get("status", "error")
    if results["kad"] != "ok":
        global_status = "error"

    return {"status": global_status, "services": results}
