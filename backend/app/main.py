import logging
import os

from dotenv import load_dotenv
from fastapi import FastAPI

from backend.app.database import Base, engine
from backend.app.routes import auth, decisions, health, laws, users

# === –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
load_dotenv()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger("legal-assistant")

# === –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ë–î ===
USE_SQLITE = os.getenv("USE_SQLITE") == "1"
if USE_SQLITE:
    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
    # –í dev-—Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    Base.metadata.create_all(bind=engine)
else:
    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL (docker/prod)")
    # –í prod-—Ä–µ–∂–∏–º–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ Alembic

# === FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI(
    title="‚öñÔ∏è Legal Assistant Arbitrage API",
    version="1.0.0",
    description=(
        "API –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —é—Ä–∏—Å—Ç–∞ –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º –¥–µ–ª–∞–º.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–∫–æ–Ω—ã, —Å—É–¥–µ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, "
        "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, health-check.\n"
        "üöÄ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ `/docs` (Swagger) –∏–ª–∏ `/redoc`."
    ),
    docs_url="/docs",
    redoc_url="/redoc",
)


# === –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ===
@app.get("/", tags=["root"])
def root():
    return {
        "message": "‚öñÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Legal Assistant Arbitrage API",
        "docs": "/docs",
        "health": "/api/health",
        "auth": "/api/auth",
    }


# === –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã ===
app.include_router(health.router, prefix="/api", tags=["health"])
app.include_router(auth.router)  # üîë –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (login, register, me)
app.include_router(users.router, prefix="/api/users", tags=["users"])
app.include_router(laws.router, prefix="/api/laws", tags=["laws"])
app.include_router(decisions.router, prefix="/api/decisions", tags=["decisions"])
