import importlib
import logging
import os
import pathlib
import pkgutil
import subprocess

from dotenv import load_dotenv
from fastapi import FastAPI

# === –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
load_dotenv()

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger("legal-assistant")

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã ===
USE_SQLITE = os.getenv("USE_SQLITE") == "1"
if USE_SQLITE:
    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
    from backend.app.database import Base, engine

    Base.metadata.create_all(bind=engine)
else:
    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL (docker/prod)")
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Alembic –º–∏–≥—Ä–∞—Ü–∏–∏

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ===
app = FastAPI(
    title="‚öñÔ∏è Legal Assistant Arbitrage API",
    version="1.1.0",
    description=(
        "API –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —é—Ä–∏—Å—Ç–∞ –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º –¥–µ–ª–∞–º.\n\n"
        "üìö –ú–æ–¥—É–ª–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–∫–æ–Ω—ã, —Å—É–¥–µ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, health-check.\n"
        "üöÄ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: `/docs` (Swagger) –∏–ª–∏ `/redoc`."
    ),
    docs_url="/docs",
    redoc_url="/redoc",
)


# === –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ===
@app.get("/", tags=["root"])
def root():
    """–ë–∞–∑–æ–≤–∞—è —Ç–æ—á–∫–∞ API."""
    return {
        "message": "‚öñÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Legal Assistant Arbitrage API",
        "docs": "/docs",
        "health": "/api/health",
        "auth": "/api/auth",
        "reset": "/api/reset",
    }


# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ ===
def register_routes(app: FastAPI):
    routes_pkg = "backend.app.routes"
    package_dir = pathlib.Path(__file__).resolve().parent / "routes"

    for _, module_name, _ in pkgutil.iter_modules([str(package_dir)]):
        if module_name == "__init__":
            continue

        module = importlib.import_module(f"{routes_pkg}.{module_name}")
        router = getattr(module, "router", None)
        if router:
            # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
            if module_name == "auth":
                prefix, tags = "/api/auth", ["auth"]
            elif module_name == "health":
                prefix, tags = "/api", ["health"]
            elif module_name == "docs":
                prefix, tags = "/api/docs", ["docs"]
            elif module_name == "reset":
                prefix, tags = "/api", ["system"]
            else:
                prefix, tags = f"/api/{module_name}", [module_name]

            app.include_router(router, prefix=prefix, tags=tags)
            logger.info(f"‚úÖ –†–æ—É—Ç {module_name} –ø–æ–¥–∫–ª—é—á–µ–Ω (prefix={prefix})")


# === –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã ===
register_routes(app)

# === –ò–º–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ ===
from backend.app.routes import docs, reset

app.include_router(docs.router)
app.include_router(reset.router)

logger.info("‚úÖ –†–æ—É—Ç—ã docs –∏ reset –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")


# === –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ë–î ===
@app.post("/api/reset/full", tags=["system"])
def reset_full():
    """
    ‚öôÔ∏è –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î (Alembic + –º–∏–≥—Ä–∞—Ü–∏–∏)
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ CI/CD –∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã.
    """
    try:
        logger.info("üß® –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Å–µ—Ç–∞ –±–∞–∑—ã...")
        subprocess.run(["alembic", "downgrade", "base"], check=False)
        subprocess.run(["alembic", "upgrade", "head"], check=True)
        logger.info("‚úÖ Alembic –ø–µ—Ä–µ—Å–æ–∑–¥–∞–ª —Å—Ö–µ–º—É.")
        return {"status": "full reset done ‚úÖ"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–±—Ä–æ—Å–µ: {e}")
        return {"error": str(e)}


# === –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ ===
logger.info("üöÄ Legal Assistant Arbitrage API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
