import os
import sys
from logging.config import fileConfig

from alembic import context
from sqlalchemy import create_engine, pool

# === –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH ===
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from backend.app import models  # noqa: F401, E402
from backend.app.database import Base  # noqa: E402

# Alembic Config
config = context.config
if config.config_file_name:
    fileConfig(config.config_file_name)

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
target_metadata = Base.metadata


def get_database_url() -> str:
    """–ë–µ—Ä—ë–º DATABASE_URL –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    url = os.getenv("DATABASE_URL")
    if not url:
        raise RuntimeError("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    print(f"üìå Alembic –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DATABASE_URL={url}")
    return url


def run_migrations_offline() -> None:
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL)."""
    url = get_database_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ (—á–µ—Ä–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î)."""
    url = get_database_url()
    connectable = create_engine(url, poolclass=pool.NullPool)

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
