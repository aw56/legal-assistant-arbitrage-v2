import os
import sys
from logging.config import fileConfig
from urllib.parse import quote_plus

from alembic import context
from dotenv import load_dotenv
from sqlalchemy import engine_from_config, pool

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º .env ---
load_dotenv(".env")

# --- Alembic config ---
config = context.config
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
DB_USER = os.getenv("POSTGRES_USER", "admin")
DB_PASS = quote_plus(os.getenv("POSTGRES_PASSWORD", "admin"))
DB_HOST = os.getenv("POSTGRES_HOST", "db")
DB_PORT = os.getenv("POSTGRES_PORT", "5432")
DB_NAME = os.getenv("POSTGRES_DB", "legal_assistant_db")

SQLALCHEMY_URL = (
    f"postgresql+psycopg2://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
)

# üëâ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º URL –Ω–∞–ø—Ä—è–º—É—é –≤ attributes, –∞ –Ω–µ —á–µ—Ä–µ–∑ set_main_option
config.attributes["sqlalchemy.url"] = SQLALCHEMY_URL

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π ---
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from backend.app.database import Base  # noqa

target_metadata = Base.metadata


def run_migrations_offline():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL)."""
    url = config.attributes.get("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î."""
    connectable = engine_from_config(
        {"sqlalchemy.url": config.attributes.get("sqlalchemy.url")},
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
