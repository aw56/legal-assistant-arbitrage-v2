–¥–∞! –∏ —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Ç–µ–º–ø ‚Äî –≤–æ—Ç –≥–æ—Ç–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–π—Ç–∏ –ø–æ —à–∞–≥–∞–º. —è —Å–¥–µ–ª–∞–ª –µ–≥–æ –ø–æ–¥ —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç (docker + alembic + fastapi + pytest) –∏ —É—á—ë–ª –≤—Å–µ –±–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–ø–ª—ã–≤–∞–ª–∏: –¥—É–±–ª–∏ —Ç–∞–±–ª–∏—Ü, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Ä–µ–≤–∏–∑–∏–∏, –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å —Ç–µ—Å—Ç–∞–º–∏, etc.

# üö¶ –ß–µ–∫-–ª–∏—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–∏–∫—Å–∞

## 0) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

```bash
# —É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ–¥–Ω—è—Ç—ã
make up
make ps

# –∑–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—å backend-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
make shell
```

–û–∂–∏–¥–∞–µ–º–æ–µ: –¥–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ up/healthy: `backend` (api), `legal-assistant-db` (postgres).

---

## 1) –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Alembic

```bash
# –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–∏–≥—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ
make current

# –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π (–Ω–∏–∂–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ)
make history

# –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ head-–º–∏–≥—Ä–∞—Ü–∏–∏
make heads
```

–û–∂–∏–¥–∞–µ–º–æ–µ: –≤—ã–≤–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫ –≤–∏–¥–∞ ‚ÄúCan't locate revision ‚Ä¶‚Äù.

### –ï—Å–ª–∏ –≤–∏–¥–∏—à—å ‚ÄúCan't locate revision ‚Ä¶‚Äù

```bash
# —Å–±—Ä–æ—Å–∏—Ç—å "–±–∏—Ç—É—é" –≤–µ—Ä—Å–∏—é alembic_version (–±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö)
docker exec -it legal-assistant-db psql -U admin -d legal_assistant_db -c "DROP TABLE IF EXISTS alembic_version;"

# —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é –æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö models.py
make makemigrations m="init fresh schema"

# –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å —à—Ç–∞–º–ø –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î)
make stamp-head

# –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≥–Ω–∞—Ç—å –∞–ø–≥—Ä–µ–π–¥ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å no-op)
make migrate
```

–û–∂–∏–¥–∞–µ–º–æ–µ: –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –æ—à–∏–±–æ–∫.

---

## 2) –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ö–µ–º—ã –ë–î (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏)

–¢–µ—Å—Ç—ã –æ–∂–∏–¥–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:

* `users`: `id, username, email, hashed_password, role, created_at, updated_at`
* `laws`: `id, code, title, article, description, created_at, updated_at`
* `decisions`: `id, case_number, court, date_decided, summary, law_id, user_id, created_at, updated_at`

–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π:

```bash
make db-shell
```

–í–Ω—É—Ç—Ä–∏ `psql`:

```sql
-- USERS
SELECT column_name FROM information_schema.columns
WHERE table_name='users' ORDER BY ordinal_position;

-- LAWS
SELECT column_name FROM information_schema.columns
WHERE table_name='laws' ORDER BY ordinal_position;

-- DECISIONS
SELECT column_name FROM information_schema.columns
WHERE table_name='decisions' ORDER BY ordinal_position;
\q
```

–û–∂–∏–¥–∞–µ–º–æ–µ: –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.
–ï—Å–ª–∏ `laws.article` –∏–ª–∏ `decisions.date_decided` –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –æ–±–Ω–æ–≤–∏ `models.py`, —Å–¥–µ–ª–∞–π:

```bash
make makemigrations m="add article to laws + date_decided to decisions"
make migrate
```

---

## 3) Healthcheck API

```bash
make health-host        # —Å —Ö–æ—Å—Ç–∞
make health-container   # –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
```

–û–∂–∏–¥–∞–µ–º–æ–µ:

```json
{"status":"ok"}
```

---

## 4) –°–º–æ—É–∫-—Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä—É—á–Ω–æ–π, —á–µ—Ä–µ–∑ curl)

```bash
# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
curl -s -X POST http://127.0.0.1:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username":"alice","password":"secret"}' | jq

# –ª–æ–≥–∏–Ω (OAuth2PasswordRequestForm)
curl -s -X POST http://127.0.0.1:8080/api/auth/login \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "username=alice&password=secret" | jq
```

–û–∂–∏–¥–∞–µ–º–æ–µ:

* `/register` ‚Üí HTTP 201 –∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è).
* `/login` ‚Üí HTTP 200 –∏ `{ "access_token": "<JWT>", "token_type": "bearer" }`.

–ü—Ä–æ—Ñ–∏–ª—å —Å JWT:

```bash
TOKEN=$(curl -s -X POST http://127.0.0.1:8080/api/auth/login \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "username=alice&password=secret" | jq -r .access_token)

curl -s http://127.0.0.1:8080/api/auth/me \
  -H "Authorization: Bearer $TOKEN" | jq
```

–û–∂–∏–¥–∞–µ–º–æ–µ: HTTP 200, JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

---

## 5) –°–º–æ—É–∫-—Ç–µ—Å—Ç CRUD (laws/decisions/users)

### Laws

```bash
# create
curl -s -X POST http://127.0.0.1:8080/api/laws/ \
  -H "Content-Type: application/json" \
  -d '{"code":"GK","title":"–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å","article":"10","description":"–ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–º"}' | jq

# list
curl -s http://127.0.0.1:8080/api/laws/ | jq

# delete (–ø–æ–¥—Å—Ç–∞–≤—å id –∏–∑ create)
curl -s -X DELETE http://127.0.0.1:8080/api/laws/1 | jq
```

–û–∂–∏–¥–∞–µ–º–æ–µ: 201 –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø–∏—Å—å, 200/204 –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.

### Decisions

```bash
# create (–ø–æ–¥—Å—Ç–∞–≤—å law_id —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–æ–Ω–∞)
curl -s -X POST http://127.0.0.1:8080/api/decisions/ \
  -H "Content-Type: application/json" \
  -d '{"case_number":"–ê40-12345/2020","court":"–ê–° –≥.–ú–æ—Å–∫–≤—ã","date_decided":"2020-05-20","summary":"–∫—Ä–∞—Ç–∫–æ","law_id":1}' | jq

# list
curl -s http://127.0.0.1:8080/api/decisions/ | jq

# delete
curl -s -X DELETE http://127.0.0.1:8080/api/decisions/1 | jq
```

–û–∂–∏–¥–∞–µ–º–æ–µ: 201/200/204 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –±–µ–∑ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö.

### Users (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)

```bash
curl -s http://127.0.0.1:8080/api/users/ | jq
```

–û–∂–∏–¥–∞–µ–º–æ–µ: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–∞—Å—Ç–æ –∑–∞ auth ‚Äî —Å–º. —Å–≤–æ–∏ —Ä–æ—É—Ç—ã).

---

## 6) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

```bash
make apidocs
```

–û–∂–∏–¥–∞–µ–º–æ–µ: —Ñ–∞–π–ª `docs/API_DOCS.md` –æ–±–Ω–æ–≤–ª—ë–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã.

---

## 7) –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤

```bash
# –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–µ–∫–µ–Ω–¥–∞:
make docker-test
# –∏–ª–∏:
make test-verbose
```

–û–∂–∏–¥–∞–µ–º–æ–µ: –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç (0 failed). –ï—Å–ª–∏ –Ω–µ —Ç–∞–∫ ‚Äî —Å–º. —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã.

---

## 8) –¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –±—ã—Å—Ç—Ä—ã–µ —Ñ–∏–∫—Å—ã

### üß± DuplicateTable (‚Äúrelation ‚Äòusers‚Äô already exists‚Äù)

–ü—Ä–∏—á–∏–Ω–∞: –º–∏–≥—Ä–∞—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É.
–†–µ—à–µ–Ω–∏—è:

* –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã ‚Äî **—à—Ç–∞–º–ø—É–µ–º** —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é:

  ```bash
  make stamp-head
  make migrate
  ```
* –ï—Å–ª–∏ –º–æ–∂–Ω–æ —Å–Ω–µ—Å—Ç–∏ —Å—Ö–µ–º—É ‚Äî –ø–æ–ª–Ω—ã–π —Ä–µ—Å–µ—Ç:

  ```bash
  make reset-db
  ```

### üß© ‚ÄúCan‚Äôt locate revision ‚Ä¶‚Äù

–°–º. –±–ª–æ–∫ 1 ‚Üí ¬´–ï—Å–ª–∏ –≤–∏–¥–∏—à—å ‚ÄúCan't locate revision ‚Ä¶‚Äù¬ª.

### üîê –û—à–∏–±–∫–∞ bcrypt ‚Äúpassword cannot be longer than 72 bytes‚Äù

–í `security.py` —Ö—ç—à–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 72 –±–∞–π—Ç–∞ (—É —Ç–µ–±—è —É–∂–µ —É—á—Ç–µ–Ω–æ). –î–ª—è –ª–æ–≥–∏–Ω–∞ ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–æ–º.

### üìß ImportError: email-validator

–î–æ–±–∞–≤—å –≤ `requirements.txt`:

```
email-validator==2.2.0
```

–∏ –ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:

```bash
make rebuild
```

### üß¨ –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å —Ç–µ—Å—Ç–∞–º–∏ (‚Äòarticle‚Äô, ‚Äòdate_decided‚Äô)

–û–±–Ω–æ–≤–∏ `models.py` (–¥–æ–±–∞–≤—å `Law.article`, `Decision.date_decided`) ‚Üí `make makemigrations` ‚Üí `make migrate`.

---

## 9) –ë—ã—Å—Ç—Ä—ã–π full-run (–∫–æ–ø–∏-–ø–∞—Å—Ç)

```bash
make up
make heads
make current || true
make history

# –µ—Å–ª–∏ alembic —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ ‚ÄúCan't locate revision ‚Ä¶‚Äù
docker exec -it legal-assistant-db psql -U admin -d legal_assistant_db -c "DROP TABLE IF EXISTS alembic_version;"
make makemigrations m="init fresh schema"
make stamp-head
make migrate

make health-host
make apidocs
make docker-test
```

---

## 10) –ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞ ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

* `make history` ‚Äî –≤ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è.
* `make current` ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–≤–∏–∑–∏—é –±–µ–∑ –æ—à–∏–±–æ–∫.
* `/api/health` ‚Äî `{"status":"ok"}`.
* –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ª–æ–≥–∏–Ω/–ø—Ä–æ—Ñ–∏–ª—å ‚Äî 201/200/200 –∏ –≤–∞–ª–∏–¥–Ω—ã–π JWT.
* CRUD –ø–æ `laws/decisions` ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è/—á–∏—Ç–∞–µ—Ç—Å—è/—É–¥–∞–ª—è–µ—Ç—Å—è.
* `make docker-test` ‚Äî —Ç–µ—Å—Ç—ã –∑–µ–ª—ë–Ω—ã–µ.

---

–µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä—é —Ç–µ–±–µ –º–∞–ª–µ–Ω—å–∫–∏–π —Å–∫—Ä–∏–ø—Ç `scripts/smoke.sh`, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≥–æ–Ω–∏—Ç —Å–º–æ—É–∫-—á–∞—Å—Ç—å (health + auth + –ø–∞—Ä—É CRUD) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –≤–µ—Ä–Ω—ë—Ç —Å–≤–æ–¥–∫—É ‚Äúok/failed‚Äù. —Å–∫–∞–∂–∏ ‚Äî –≤—ã–¥–∞–º —Å—Ä–∞–∑—É –ø–æ–¥ —Ç–≤–æ–∏ –ø—É—Ç–∏.
