.PHONY: venv deps run test alembic-up docs \
        docker-prod docker-prod-down docker-prod-restart \
        env-local env-prod \
        kill-8000 kill-port

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
venv:
	python3 -m venv venv

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Python + OpenAPI CLI)
deps:
	. venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt && npm install -g openapi-markdown-cli

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (FastAPI)
run:
	. venv/bin/activate && uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (SQLite)
test:
	. venv/bin/activate && TEST_SQLITE=1 pytest -v

# –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic
alembic-up:
	. venv/bin/activate && alembic upgrade head

# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OpenAPI ‚Üí Markdown
docs:
	. venv/bin/activate && python scripts/generate_openapi_json.py && npx openapi-markdown-cli -i docs/openapi.json -o docs/API_DOCS.md

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DOCKER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (Docker Compose)
docker-prod:
	docker compose -f docker-compose.prod.yml up --build -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
docker-prod-down:
	docker compose -f docker-compose.prod.yml down

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
docker-prod-restart:
	docker compose -f docker-compose.prod.yml down && docker compose -f docker-compose.prod.yml up --build -d

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ö–†–£–ñ–ï–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
env-local:
	cp .env.local .env
	@echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (.env.local ‚Üí .env) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ."

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–µ
env-prod:
	cp .env.prod .env
	@echo "‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –æ–∫—Ä—É–∂–µ–Ω–∏–µ (.env.prod ‚Üí .env) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ."

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¢–ò–õ–ò–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã, –¥–µ—Ä–∂–∞—â–∏–µ –ø–æ—Ä—Ç 8000
kill-8000:
	@PID=$$(sudo lsof -t -i:8000 2>/dev/null); \
	if [ -n "$$PID" ]; then \
		echo "üõë –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å(—ã) –Ω–∞ –ø–æ—Ä—Ç—É 8000: $$PID"; \
		sudo kill -9 $$PID; \
	else \
		echo "‚úÖ –ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω"; \
	fi

# –£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ª—é–±–æ–º –ø–æ—Ä—Ç—É: make kill-port PORT=XXXX
kill-port:
	@if [ -z "$(PORT)" ]; then \
		echo "‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make kill-port PORT=XXXX"; \
	else \
		PID=$$(sudo lsof -t -i:$(PORT) 2>/dev/null); \
		if [ -n "$$PID" ]; then \
			echo "üõë –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å(—ã) –Ω–∞ –ø–æ—Ä—Ç—É $(PORT): $$PID"; \
			sudo kill -9 $$PID; \
		else \
			echo "‚úÖ –ü–æ—Ä—Ç $(PORT) —Å–≤–æ–±–æ–¥–µ–Ω"; \
		fi; \
	fi
