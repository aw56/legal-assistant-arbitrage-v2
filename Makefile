# ============================================
# üìò Legal Assistant Arbitrage v2 ‚Äî Makefile
# ============================================

# Python virtualenv
VENV = . venv/bin/activate &&

# Docker image
DOCKER_USERNAME ?= alwalz
DOCKER_IMAGE = $(DOCKER_USERNAME)/legal-assistant-arbitrage-v2

# ============================================
# üîπ Help
# ============================================

.PHONY: help
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
	@echo ""
	@echo "üìò Legal Assistant Arbitrage v2 ‚Äî Makefile"
	@echo "============================================"
	@grep -E '^[a-zA-Z0-9_-]+:.*?##' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf " \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""

# ============================================
# üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# ============================================

.PHONY: run run-bg stop-bg logs
run: ## –ó–∞–ø—É—Å–∫ API (–ª–æ–∫–∞–ª—å–Ω–æ, –≤ foreground)
	$(VENV) uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload

run-bg: ## –ó–∞–ø—É—Å–∫ API –≤ —Ñ–æ–Ω–µ
	$(VENV) nohup uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload > server.log 2>&1 &
	@echo "üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ. –õ–æ–≥–∏: tail -f server.log"

stop-bg: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
	pkill -f "uvicorn backend.app.main:app" || true
	@echo "üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
	tail -f server.log

# ============================================
# üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏–∏
# ============================================

.PHONY: alembic clean-db
alembic: ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å alembic –º–∏–≥—Ä–∞—Ü–∏–∏
	$(VENV) alembic upgrade head

clean-db: ## –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é SQLite
	rm -f test.db
	@echo "üóëÔ∏è test.db —É–¥–∞–ª—ë–Ω"

# ============================================
# üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ============================================

.PHONY: test check
test: ## –ó–∞–ø—É—Å–∫ pytest —Å SQLite
	$(VENV) TEST_SQLITE=1 pytest -v

check: format lint test ## –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + —Ç–µ—Å—Ç—ã + –ª–∏–Ω—Ç–µ—Ä—ã

# ============================================
# üîπ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
# ============================================

.PHONY: docs
docs: ## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
	PYTHONPATH=. $(VENV) python scripts/generate_openapi_docs.py

# ============================================
# üîπ Docker
# ============================================

.PHONY: docker docker-prod docker-reset docker-build docker-push docker-run docker-login
docker: ## –ó–∞–ø—É—Å–∫ –≤ dev-—Ä–µ–∂–∏–º–µ
	docker compose up --build

docker-prod: ## –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥-—Ä–µ–∂–∏–º–µ
	docker compose -f docker-compose.prod.yml up -d --build

docker-reset: ## –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ volume
	docker compose -f docker-compose.prod.yml down -v
	@echo "üîÑ Docker volume –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã"

docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker-–æ–±—Ä–∞–∑
	docker build -t $(DOCKER_IMAGE):latest .

docker-login: ## –õ–æ–≥–∏–Ω –≤ Docker Hub (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç DOCKER_USERNAME –∏ DOCKER_PASSWORD)
	@if [ -z "$(DOCKER_PASSWORD)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏ DOCKER_PASSWORD (–Ω–∞–ø—Ä–∏–º–µ—Ä, export DOCKER_PASSWORD=xxx)"; \
		exit 1; \
	fi
	echo "$(DOCKER_PASSWORD)" | docker login -u "$(DOCKER_USERNAME)" --password-stdin

docker-push: docker-build ## –ó–∞–ø—É—à–∏—Ç—å Docker-–æ–±—Ä–∞–∑ –≤ Docker Hub
	$(MAKE) docker-login
	docker push $(DOCKER_IMAGE):latest

docker-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Docker-–æ–±—Ä–∞–∑ (—É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ 8000)
	@if lsof -i :8000 | grep LISTEN; then \
		echo "‚ö†Ô∏è –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç ‚Äî –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º..."; \
		pkill -f "uvicorn backend.app.main:app" || true; \
		docker ps -q --filter publish=8000 | xargs -r docker stop; \
	fi
	docker run -d -p 8000:8000 $(DOCKER_IMAGE):latest
	@echo "üöÄ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://127.0.0.1:8000"

# ============================================
# üîπ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏–π
# ============================================

.PHONY: env-local env-prod
env-local: ## –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (SQLite)
	cp .env.example .env && echo "USE_SQLITE=1" >> .env
	@echo "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (SQLite)"

env-prod: ## –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (PostgreSQL)
	cp .env.example .env && sed -i '/USE_SQLITE/d' .env
	@echo "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (PostgreSQL)"

# ============================================
# üîπ –ö–æ–¥—Å—Ç–∞–π–ª –∏ –ª–∏–Ω—Ç–µ—Ä—ã
# ============================================

.PHONY: dev-install format lint
dev-install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	$(VENV) pip install black isort flake8 pre-commit

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	$(VENV) black backend scripts
	$(VENV) isort backend scripts

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∏–ª—å
	$(VENV) black --check backend scripts
	$(VENV) isort --check-only backend scripts
	$(VENV) flake8 backend scripts

# ============================================
# üîπ Pre-commit hooks
# ============================================

.PHONY: pre-commit-install pre-commit-run
pre-commit-install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit —Ö—É–∫–∏
	$(VENV) pre-commit install
	@echo "‚úÖ pre-commit —Ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

pre-commit-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
	$(VENV) pre-commit run --all-files

# ============================================
# üîπ –£—Ç–∏–ª–∏—Ç—ã
# ============================================

.PHONY: clean-pycache reset cleanup save
clean-pycache: ## –û—á–∏—Å—Ç–∏—Ç—å pycache
	find . -type d -name "__pycache__" -exec rm -rf {} +

reset: clean-pycache clean-db ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "üîÑ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

cleanup: ## –û—á–∏—Å—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞
	. venv/bin/activate && bash scripts/cleanup_imports.sh

save: ## –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub
	@git add .
	@git commit -m "chore: save current state"
	@git push -u origin main
	@echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub"
