name: ⚖️ CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}-backend
  IMAGE_TAG: ${{ github.ref_name }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: legal_assistant_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U admin -d legal_assistant_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: 🧹 Run pre-commit (lint)
        run: pre-commit run --all-files --show-diff-on-failure

      - name: 🛠️ Fix Alembic heads if needed
        run: python3 scripts/fix_migrations.py

      - name: 🗄️ Run migrations
        env:
          DATABASE_URL: postgresql+psycopg2://admin:admin@localhost:5432/legal_assistant_db
        run: alembic upgrade head

      - name: ✅ Run tests
        env:
          DATABASE_URL: postgresql+psycopg2://admin:admin@localhost:5432/legal_assistant_db
        run: pytest -vv --disable-warnings


  smoke:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4

      - name: 🐳 Build & run containers
        run: docker compose -f docker-compose.prod.yml up -d --build

      - name: ⏳ Wait for API
        run: |
          for i in {1..20}; do
            if curl -s http://127.0.0.1:8080/api/health | grep -q "ok"; then
              echo "✅ API is up"
              exit 0
            fi
            echo "⏳ Waiting for API..."
            sleep 5
          done
          echo "❌ API not responding" && exit 1

      - name: 🚦 Run smoke tests
        run: make smoke


  build-and-push:
    runs-on: ubuntu-latest
    needs: smoke
    permissions:
      contents: read
      packages: write

    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4

      - name: 🐳 Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build Docker image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG -f Dockerfile .

      - name: 📦 Push Docker image
        run: docker push $IMAGE_NAME:$IMAGE_TAG


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: 🚀 Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_HOST || secrets.STAGING_SERVER_HOST }}
          username: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_USER || secrets.STAGING_SERVER_USER }}
          key: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_SSH_KEY || secrets.STAGING_SERVER_SSH_KEY }}
          script: |
            set -e
            cd /opt/legal-assistant

            echo "📥 Pulling latest image..."
            docker compose -f docker-compose.prod.yml pull backend

            echo "🔄 Restarting backend..."
            docker compose -f docker-compose.prod.yml up -d --force-recreate backend

            echo "🗄️ Running migrations..."
            docker compose -f docker-compose.prod.yml exec -T backend alembic upgrade head

            echo "✅ Deploy completed on ${{ github.ref_name }}"


  # backup:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: 📥 Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: 💾 Upload DB dump to S3
  #       run: |
  #         docker exec -t legal-assistant-db pg_dump -U admin legal_assistant_db > db_backup.sql
  #         aws s3 cp db_backup.sql s3://${{ secrets.AWS_S3_BUCKET }}/db_backups/$(date +'%Y-%m-%d_%H-%M-%S').sql
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_DEFAULT_REGION: eu-central-1
