---
# yamllint disable rule:truthy rule:line-length
name: ‚öñÔ∏è CI/CD Pipeline ‚Äî Legal Assistant Arbitrage v2.4

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}-backend
  IMAGE_TAG: ${{ github.ref_name }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: legal_assistant_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U admin -d legal_assistant_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: üßπ Run pre-commit (lint)
        run: pre-commit run --all-files --show-diff-on-failure

      - name: üß© Lint Markdown (Strict)
        run: make lint-docs-strict

      - name: üõ†Ô∏è Fix Alembic heads if needed
        run: python3 scripts/fix_migrations.py

      - name: üóÑÔ∏è Run migrations
        env:
          DATABASE_URL: postgresql+psycopg2://admin:admin@localhost:5432/legal_assistant_db
        run: alembic upgrade head

      - name: ‚úÖ Run tests
        env:
          DATABASE_URL: postgresql+psycopg2://admin:admin@localhost:5432/legal_assistant_db
        run: pytest -vv --disable-warnings

      - name: üì£ Notify Telegram (Success)
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: >
          make telegram-notify MESSAGE="‚úÖ CI —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω
          –¥–ª—è Legal Assistant Arbitrage v2.4"

      - name: üì£ Notify Telegram (Failure)
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: >
          make telegram-notify MESSAGE="‚ùå –û—à–∏–±–∫–∞ CI Legal Assistant Arbitrage v2.4 ‚Äî
          –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏"

  smoke:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üê≥ Build & run containers
        run: docker compose -f docker-compose.prod.yml up -d --build

      - name: ‚è≥ Wait for API
        run: |
          for i in {1..20}; do
            if curl -s http://127.0.0.1:8080/api/health | grep -q "ok"; then
              echo "‚úÖ API is up"
              exit 0
            fi
            echo "‚è≥ Waiting for API..."
            sleep 5
          done
          echo "‚ùå API not responding" && exit 1

      - name: üö¶ Run smoke tests
        run: make smoke

      - name: üì£ Notify Telegram (Smoke Success)
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: >
          make telegram-notify MESSAGE="üåê Smoke-—Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã:
          API –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health ‚úÖ"

      - name: üì£ Notify Telegram (Smoke Failure)
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: >
          make telegram-notify MESSAGE="üö® –û—à–∏–±–∫–∞ smoke-—Ç–µ—Å—Ç–æ–≤:
          API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health ‚ùå"
