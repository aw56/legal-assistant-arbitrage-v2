# ================================================
# ‚öñÔ∏è Legal Assistant Arbitrage v2.4 ‚Äî Unified CI Makefile
# ================================================
.DEFAULT_GOAL := help

# --- Locale settings ---
SHELL := /bin/bash
.SHELLFLAGS := -o pipefail -c
export LANG := en_US.UTF-8
export LC_ALL := en_US.UTF-8
export LANGUAGE := en_US.UTF-8

# --- Base vars ---
COMPOSE_FILE        = docker-compose.prod.yml
BACKEND_CONTAINER  := $(shell docker compose -f $(COMPOSE_FILE) ps -q backend)
DB_CONTAINER        = legal-assistant-db
DB_NAME             = legal_assistant_db
DB_USER             = admin
DB_DUMP_FILE        = backup.sql
SEED_FILE           = seeds/init_data.sql
FIXTURES_DIR        = fixtures

# ============================
# üì¶ INSTALL / SETUP
# ============================
install: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å prod –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	docker exec -it $(BACKEND_CONTAINER) pip install -r requirements.txt

install-dev: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	docker exec -it $(BACKEND_CONTAINER) pip install -r requirements-dev.txt

setup-dev: install-dev up migrate seed test ## üöÄ Dev setup
	@echo "‚úÖ Dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"

setup-prod: rebuild migrate seed ## üöÄ Prod setup
	@echo "‚úÖ Prod –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"

# ============================
# üê≥ DOCKER
# ============================
up: ## üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose -f $(COMPOSE_FILE) up -d --build

down: ## ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞
	docker compose -f $(COMPOSE_FILE) down

rebuild: ## üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
	docker compose -f $(COMPOSE_FILE) down --volumes --remove-orphans
	docker compose -f $(COMPOSE_FILE) up -d --build --force-recreate

logs:
	docker compose -f $(COMPOSE_FILE) logs -f

ps:
	docker compose -f $(COMPOSE_FILE) ps

shell:
	docker exec -it $(BACKEND_CONTAINER) bash

# ============================
# üóÑÔ∏è MIGRATIONS (Alembic)
# ============================
migrate:
	docker exec -it $(BACKEND_CONTAINER) alembic upgrade head

makemigrations:
	docker exec -it $(BACKEND_CONTAINER) alembic revision --autogenerate -m "new migration"

fix-migrations:
	docker exec -it $(BACKEND_CONTAINER) python3 scripts/fix_migrations.py

current:
	docker exec -it $(BACKEND_CONTAINER) alembic current

# ============================
# ‚ù§Ô∏è HEALTH / SMOKE TESTS
# ============================
wait-for-api:
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ API..."
	@until curl -s http://127.0.0.1:8080/api/health | grep '"ok"' > /dev/null; do echo "‚Ä¶"; sleep 2; done
	@echo "‚úÖ API –≥–æ—Ç–æ–≤!"

smoke:
	@pytest -m smoke -v --disable-warnings --maxfail=1 --tb=short || (echo "‚ùå Smoke –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"; exit 1)

smoke-ci:
	@echo "ü§ñ Smoke-—Ç–µ—Å—Ç—ã (CI)..."
	@pytest -m smoke -v --disable-warnings || ( \
		echo "‚ùå Smoke –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"; \
		python3 backend/app/utils/notify_telegram.py "üö® Smoke —É–ø–∞–ª–∏ –≤ CI ‚ùå"; \
		exit 1; \
	)
	@echo "‚úÖ Smoke —É—Å–ø–µ—à–Ω–æ!"

# ============================
# ‚úÖ TESTS / INTEGRATION
# ============================
test:
	docker exec -it $(BACKEND_CONTAINER) pytest backend/app/tests

test-ci-v33:
	@echo "üöÄ Newman CI (AutoAuth v3.3)..."
	newman run docs/Legal_Assistant_Arbitrage_v3.3_CI.postman_collection.json \
		-e docs/Legal_Assistant_Env.postman_environment.json \
		--reporters cli,html \
		--reporter-html-export artifacts/newman_report_v33.html || { \
			echo '‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤ (—Å–º. –æ—Ç—á—ë—Ç)'; exit 1; }

test-ci-v3: ## –ü–æ–ª–Ω—ã–π CI-—Ü–∏–∫–ª (pytest + Postman + —Å–Ω–∞–ø—à–æ—Ç + push)
	@echo "üöÄ –ü–æ–ª–Ω—ã–π CI-—Ü–∏–∫–ª AutoAuth v3.3"
	@START=$$(date '+%Y-%m-%d %H:%M:%S'); \
	$(MAKE) test-ci-v33 && STATUS="‚úÖ OK" || STATUS="‚ùå –û—à–∏–±–∫–∞"; \
	echo "üì∏ –°–Ω–∞–ø—à–æ—Ç..."; $(MAKE) progress-snapshot; \
	echo "üßæ –ó–∞–ø–∏—Å—å –≤ PROGRESS_TACTICAL.md..."; \
	echo "" >> docs/PROGRESS_TACTICAL.md; \
	echo "üß™ CI v3.3 ‚Äî $$STATUS ($$START)" >> docs/PROGRESS_TACTICAL.md; \
	$(MAKE) progress-auto-push; \
	echo "‚úÖ –ü–æ–ª–Ω—ã–π CI –∑–∞–≤–µ—Ä—à—ë–Ω."

integration:
	@pytest -m integration -v --disable-warnings --maxfail=1 || (echo "‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"; exit 1)

# ============================
# üì¢ TELEGRAM
# ============================
TELEGRAM_BOT_TOKEN ?= $(TELEGRAM_BOT_TOKEN)
TELEGRAM_CHAT_ID ?= $(TELEGRAM_CHAT_ID)
MESSAGE ?= "‚úÖ CI —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω."

telegram-notify:
	@python3 backend/app/utils/notify_telegram.py "$(MESSAGE)"

telegram-notify-test:
	@$(MAKE) telegram-notify MESSAGE="üöÄ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ Makefile"

# ============================
# üß© SED TOOLKIT (v3.7)
# ============================
SED_RULES := scripts/sed_auto_rules.txt
SED_LOG := logs/sed.log
SED_CSV := logs/sed_auto_log.csv
SED_BACKUP_DIR := backup/sed
SED_TIMESTAMP := $(shell date '+%Y-%m-%d_%H-%M-%S')

sed-validate:
	@file $(SED_RULES)
	@grep -q '‚Üí' $(SED_RULES) || (echo "‚ùå –ù–µ—Ç ‚Üí"; exit 1)
	@echo "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"

sed-auto:
	@mkdir -p logs $(SED_BACKUP_DIR)
	@echo "ü§ñ sed-auto –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
	@> $(SED_LOG); echo "pattern,replace,file,timestamp" > $(SED_CSV)
	@while IFS='‚Üí' read -r p r; do \
		[ -z "$$p" ] && continue; \
		files=$$(grep -rl "$$p" backend app Makefile scripts 2>/dev/null || true); \
		for f in $$files; do \
			cp "$$f" "$(SED_BACKUP_DIR)/$$(basename $$f)_$(SED_TIMESTAMP).bak"; \
			sed -i "s|$$p|$$r|g" "$$f"; \
			echo "$$p,$$r,$$f,$(SED_TIMESTAMP)" >> $(SED_CSV); \
			echo "‚úÖ $$f"; \
		done; \
	done < $(SED_RULES)
	@echo "‚úÖ sed-auto –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ–æ–≥–∏: $(SED_LOG)"

# ============================
# üìò PROGRESS & CI-DOCS v2.4
# ============================
PROGRESS_DIR := artifacts
PROGRESS_DOCS := docs
PROGRESS_DATE := $(shell date '+%Y%m%d')
PROGRESS_TIME := $(shell date '+%H%M')
PROGRESS_FILE := $(PROGRESS_DOCS)/PROGRESS_$(PROGRESS_DATE).md
PROGRESS_SNAPSHOT := $(PROGRESS_DIR)/PROGRESS_$(PROGRESS_DATE)_$(PROGRESS_TIME).md
PROGRESS_TEMPLATE := $(PROGRESS_DOCS)/PROGRESS_TEMPLATE.md
TACTICAL_FILE := $(PROGRESS_DOCS)/PROGRESS_TACTICAL.md

progress-template:
	@mkdir -p $(PROGRESS_DOCS)
	@cp $(PROGRESS_TEMPLATE) $(PROGRESS_FILE) 2>/dev/null || \
	( echo "# üìò –û—Ç—á—ë—Ç $(PROGRESS_DATE)" > $(PROGRESS_FILE); echo "**–î–∞—Ç–∞:** $$(date)" >> $(PROGRESS_FILE) )
	@echo "‚úÖ –°–æ–∑–¥–∞–Ω: $(PROGRESS_FILE)"

progress-append:
	@echo "‚úèÔ∏è –í—Å—Ç–∞–≤—å —Ñ–∞–∫—Ç—ã (Ctrl+D –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):"
	@cat >> $(PROGRESS_FILE)
	@echo "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ $(PROGRESS_FILE)"

progress-snapshot:
	@mkdir -p $(PROGRESS_DIR)
	@cp $(PROGRESS_FILE) $(PROGRESS_SNAPSHOT)
	@echo "‚úÖ –°–Ω–∞–ø—à–æ—Ç: $(PROGRESS_SNAPSHOT)"

progress-auto-push:
	@$(MAKE) progress-snapshot
	@git add docs/PROGRESS_*.md artifacts/PROGRESS_*.md || true
	@git commit -m "üìò progress snapshot $(PROGRESS_DATE)_$(PROGRESS_TIME)" || echo "‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π."
	@git push origin main
	@echo "‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub"

progress-help:
	@echo "make progress-template  ‚Üí —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç"
	@echo "make progress-append    ‚Üí –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç—ã"
	@echo "make progress-snapshot  ‚Üí —Å–Ω–∞–ø—à–æ—Ç"
	@echo "make progress-auto-push ‚Üí —Å–Ω–∞–ø—à–æ—Ç + git push"

# ============================
# üìö DOCS & HELP
# ============================
apidocs:
	docker compose -f $(COMPOSE_FILE) exec backend sh -c "PYTHONPATH=/code python3 scripts/generate_docs.py"

archdocs:
	docker compose -f $(COMPOSE_FILE) exec backend sh -c "PYTHONPATH=/code python3 scripts/generate_architecture.py"

docs: apidocs archdocs
	@echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞."

help:
	@echo "=== üß≠ Makefile Legal Assistant Arbitrage v2.4 ==="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
	| awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-28s\033[0m %s\n", $$1, $$2}'
